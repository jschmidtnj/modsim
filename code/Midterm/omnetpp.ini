[General]
network = Midterm

# first client server

**.api_server_1.serviceTime = exponential(.01s)
**.local_cache_1.serviceTime = exponential(.01s)
**.job_manager_1.serviceTime = exponential(.01s)

# process updates
**.client_1_process_updates.serviceTime = exponential(.001s)
**.client_2_process_updates.serviceTime = exponential(.001s)

# second client server

# client server 2
**.api_server_2.serviceTime = exponential(.01s)
**.local_cache_2.serviceTime = exponential(.01s)
**.job_manager_2.serviceTime = exponential(.01s)

# process updates
**.client_3_process_updates.serviceTime = exponential(.001s)
**.client_4_process_updates.serviceTime = exponential(.001s)

# global
**.pub_sub_orchestration.serviceTime = exponential(.1s)
**.central_server.serviceTime = exponential(.1s)
**.database.serviceTime = exponential(.01s)

# delays for updating global
**.central_update_delay.delay = 20s
**.api_peer_update.delay = 2s

# job input
# 10000 is the default
**.client1.numJobs = 10000
**.client2.numJobs = 10000
**.client3.numJobs = 10000
**.client4.numJobs = 10000
# send every half second a new update (on average)
# can be faster if typing
**.client1.interArrivalTime = 0.5s
**.client2.interArrivalTime = 0.5s
**.client3.interArrivalTime = 0.5s
**.client4.interArrivalTime = 0.5s

# capacity before critical components get overloaded
**.central_server_input.capacity = 2500
**.database_input.capacity = 50
**.api_server_1_input.capacity = 2500
**.api_server_2_input.capacity = 2500
**.local_cache_1_input.capacity = 1000
**.local_cache_2_input.capacity = 1000
**.job_manager_1_input.capacity = 1000
**.job_manager_2_input.capacity = 1000
**.pub_sub_orchestration_input.capacity = 1000
